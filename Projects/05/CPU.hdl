// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // decode A/C-Instruction
    Not(in=instruction[15], out=isAinstr);
    Not(in=isAinstr, out=isCinstr);

    // Load A from Instruction oder ALU?
    And(a=isCinstr, b=instruction[5], out=loadFromAlu);
    Mux16(a=instruction, b=ALUtoA, sel=loadFromAlu, out=toRegA);

    // A-Register
    Or(a=isAinstr, b=loadFromAlu, out=loadA);
    ARegister(in=toRegA, load=loadA, out=outRegA, out[0..14]=addressM);

    // select A or M, but only f√ºr C-Instuctions:
    And(a=isCinstr, b=instruction[12], out=selM);
    Mux16(a=outRegA, b=inM, sel=selM, out=outRegMorA);

    // D-Register
    And(a=isCinstr, b=instruction[4], out=loadD);
    DRegister(in=ALUtoD, load=loadD, out=outRegD);

    // ALU
    ALU(x=outRegD, y=outRegMorA,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9],  ny=instruction[8],
        f=instruction[7],  no=instruction[6],
        out=outM, out=ALUtoD, out=ALUtoA, zr=zrOut, ng=ngOut);

    // Write M
    // writeM is simply instruction[3], if C-Instruction
    And(a=isCinstr, b=instruction[3], out=writeM);

    // Jumps
    And(a=zrOut, b=instruction[1], out=JEQ);
    And(a=ngOut, b=instruction[2], out=JLT);
    Or(a=JEQ, b=JLT, out=JLE);

    Or(a=zrOut, b=ngOut, out=zOrNeg);
    Not(in=zOrNeg, out=pos);
    And(a=pos, b=instruction[0], out=JGT);

    // Load PC only for C-instructions any any Jump:
    Or(a=JLE, b=JGT, out=JMP);
    And(a=isCinstr, b=JMP, out=loadPC);

    // Process Counter
    Not(in=loadPC, out=incPC);
    PC(in=outRegA, load=loadPC, inc=incPC, reset=reset, out[0..14]=pc);
}
